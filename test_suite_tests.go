// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/bionis-labs/vapi-server-sdk-go/internal"
	time "time"
)

type CreateTestSuiteTestVoiceDto struct {
	// These are the scorers used to evaluate the test.
	Scorers []*TestSuiteTestScorerAi `json:"scorers,omitempty" url:"-"`
	// This is the script to be used for the voice test.
	Script string `json:"script" url:"-"`
	// This is the number of attempts allowed for the test.
	NumAttempts *float64 `json:"numAttempts,omitempty" url:"-"`
	// This is the name of the test.
	Name  *string `json:"name,omitempty" url:"-"`
	type_ string
}

func (c *CreateTestSuiteTestVoiceDto) Type() string {
	return c.type_
}

func (c *CreateTestSuiteTestVoiceDto) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateTestSuiteTestVoiceDto
	var body unmarshaler
	if err := json.Unmarshal(data, &body); err != nil {
		return err
	}
	*c = CreateTestSuiteTestVoiceDto(body)
	c.type_ = "voice"
	return nil
}

func (c *CreateTestSuiteTestVoiceDto) MarshalJSON() ([]byte, error) {
	type embed CreateTestSuiteTestVoiceDto
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*c),
		Type:  "voice",
	}
	return json.Marshal(marshaler)
}

type TestSuiteTestControllerFindAllPaginatedRequest struct {
	// This is the page number to return. Defaults to 1.
	Page *float64 `json:"-" url:"page,omitempty"`
	// This is the sort order for pagination. Defaults to 'DESC'.
	SortOrder *TestSuiteTestControllerFindAllPaginatedRequestSortOrder `json:"-" url:"sortOrder,omitempty"`
	// This is the maximum number of items to return. Defaults to 100.
	Limit *float64 `json:"-" url:"limit,omitempty"`
	// This will return items where the createdAt is greater than the specified value.
	CreatedAtGt *time.Time `json:"-" url:"createdAtGt,omitempty"`
	// This will return items where the createdAt is less than the specified value.
	CreatedAtLt *time.Time `json:"-" url:"createdAtLt,omitempty"`
	// This will return items where the createdAt is greater than or equal to the specified value.
	CreatedAtGe *time.Time `json:"-" url:"createdAtGe,omitempty"`
	// This will return items where the createdAt is less than or equal to the specified value.
	CreatedAtLe *time.Time `json:"-" url:"createdAtLe,omitempty"`
	// This will return items where the updatedAt is greater than the specified value.
	UpdatedAtGt *time.Time `json:"-" url:"updatedAtGt,omitempty"`
	// This will return items where the updatedAt is less than the specified value.
	UpdatedAtLt *time.Time `json:"-" url:"updatedAtLt,omitempty"`
	// This will return items where the updatedAt is greater than or equal to the specified value.
	UpdatedAtGe *time.Time `json:"-" url:"updatedAtGe,omitempty"`
	// This will return items where the updatedAt is less than or equal to the specified value.
	UpdatedAtLe *time.Time `json:"-" url:"updatedAtLe,omitempty"`
}

type UpdateTestSuiteTestVoiceDto struct {
	// These are the scorers used to evaluate the test.
	Scorers []*TestSuiteTestScorerAi `json:"scorers,omitempty" url:"-"`
	// This is the name of the test.
	Name *string `json:"name,omitempty" url:"-"`
	// This is the script to be used for the voice test.
	Script *string `json:"script,omitempty" url:"-"`
	// This is the number of attempts allowed for the test.
	NumAttempts *float64 `json:"numAttempts,omitempty" url:"-"`
}

type TestSuiteTestsPaginatedResponse struct {
	// A list of test suite tests.
	Results []*TestSuiteTestVoice `json:"results,omitempty" url:"results,omitempty"`
	// Metadata about the pagination.
	Metadata *PaginationMeta `json:"metadata,omitempty" url:"metadata,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TestSuiteTestsPaginatedResponse) GetResults() []*TestSuiteTestVoice {
	if t == nil {
		return nil
	}
	return t.Results
}

func (t *TestSuiteTestsPaginatedResponse) GetMetadata() *PaginationMeta {
	if t == nil {
		return nil
	}
	return t.Metadata
}

func (t *TestSuiteTestsPaginatedResponse) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TestSuiteTestsPaginatedResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler TestSuiteTestsPaginatedResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TestSuiteTestsPaginatedResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestSuiteTestsPaginatedResponse) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TestSuiteTestControllerFindAllPaginatedRequestSortOrder string

const (
	TestSuiteTestControllerFindAllPaginatedRequestSortOrderAsc  TestSuiteTestControllerFindAllPaginatedRequestSortOrder = "ASC"
	TestSuiteTestControllerFindAllPaginatedRequestSortOrderDesc TestSuiteTestControllerFindAllPaginatedRequestSortOrder = "DESC"
)

func NewTestSuiteTestControllerFindAllPaginatedRequestSortOrderFromString(s string) (TestSuiteTestControllerFindAllPaginatedRequestSortOrder, error) {
	switch s {
	case "ASC":
		return TestSuiteTestControllerFindAllPaginatedRequestSortOrderAsc, nil
	case "DESC":
		return TestSuiteTestControllerFindAllPaginatedRequestSortOrderDesc, nil
	}
	var t TestSuiteTestControllerFindAllPaginatedRequestSortOrder
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (t TestSuiteTestControllerFindAllPaginatedRequestSortOrder) Ptr() *TestSuiteTestControllerFindAllPaginatedRequestSortOrder {
	return &t
}
