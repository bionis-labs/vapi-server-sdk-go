// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"

	internal "github.com/bionis-labs/vapi-server-sdk-go/internal"
)

type UpdateWorkflowDto struct {
	Nodes []*UpdateWorkflowDtoNodesItem `json:"nodes,omitempty" url:"-"`
	// These are the options for the workflow's LLM.
	Model *UpdateWorkflowDtoModel `json:"model,omitempty" url:"-"`
	Name  *string                 `json:"name,omitempty" url:"-"`
	Edges []*Edge                 `json:"edges,omitempty" url:"-"`
}

type CreateWorkflowDto struct {
	Nodes []*CreateWorkflowDtoNodesItem `json:"nodes,omitempty" url:"nodes,omitempty"`
	// These are the options for the workflow's LLM.
	Model *CreateWorkflowDtoModel `json:"model,omitempty" url:"model,omitempty"`
	Name  string                  `json:"name" url:"name"`
	Edges []*Edge                 `json:"edges,omitempty" url:"edges,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CreateWorkflowDto) GetNodes() []*CreateWorkflowDtoNodesItem {
	if c == nil {
		return nil
	}
	return c.Nodes
}

func (c *CreateWorkflowDto) GetModel() *CreateWorkflowDtoModel {
	if c == nil {
		return nil
	}
	return c.Model
}

func (c *CreateWorkflowDto) GetName() string {
	if c == nil {
		return ""
	}
	return c.Name
}

func (c *CreateWorkflowDto) GetEdges() []*Edge {
	if c == nil {
		return nil
	}
	return c.Edges
}

func (c *CreateWorkflowDto) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateWorkflowDto) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateWorkflowDto
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateWorkflowDto(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateWorkflowDto) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// These are the options for the workflow's LLM.
type CreateWorkflowDtoModel struct {
	AnthropicModel    *AnthropicModel
	AnyscaleModel     *AnyscaleModel
	CerebrasModel     *CerebrasModel
	CustomLlmModel    *CustomLlmModel
	DeepInfraModel    *DeepInfraModel
	DeepSeekModel     *DeepSeekModel
	GoogleModel       *GoogleModel
	GroqModel         *GroqModel
	InflectionAiModel *InflectionAiModel
	OpenAiModel       *OpenAiModel
	OpenRouterModel   *OpenRouterModel
	PerplexityAiModel *PerplexityAiModel
	TogetherAiModel   *TogetherAiModel
	XaiModel          *XaiModel

	typ string
}

func (c *CreateWorkflowDtoModel) GetAnthropicModel() *AnthropicModel {
	if c == nil {
		return nil
	}
	return c.AnthropicModel
}

func (c *CreateWorkflowDtoModel) GetAnyscaleModel() *AnyscaleModel {
	if c == nil {
		return nil
	}
	return c.AnyscaleModel
}

func (c *CreateWorkflowDtoModel) GetCerebrasModel() *CerebrasModel {
	if c == nil {
		return nil
	}
	return c.CerebrasModel
}

func (c *CreateWorkflowDtoModel) GetCustomLlmModel() *CustomLlmModel {
	if c == nil {
		return nil
	}
	return c.CustomLlmModel
}

func (c *CreateWorkflowDtoModel) GetDeepInfraModel() *DeepInfraModel {
	if c == nil {
		return nil
	}
	return c.DeepInfraModel
}

func (c *CreateWorkflowDtoModel) GetDeepSeekModel() *DeepSeekModel {
	if c == nil {
		return nil
	}
	return c.DeepSeekModel
}

func (c *CreateWorkflowDtoModel) GetGoogleModel() *GoogleModel {
	if c == nil {
		return nil
	}
	return c.GoogleModel
}

func (c *CreateWorkflowDtoModel) GetGroqModel() *GroqModel {
	if c == nil {
		return nil
	}
	return c.GroqModel
}

func (c *CreateWorkflowDtoModel) GetInflectionAiModel() *InflectionAiModel {
	if c == nil {
		return nil
	}
	return c.InflectionAiModel
}

func (c *CreateWorkflowDtoModel) GetOpenAiModel() *OpenAiModel {
	if c == nil {
		return nil
	}
	return c.OpenAiModel
}

func (c *CreateWorkflowDtoModel) GetOpenRouterModel() *OpenRouterModel {
	if c == nil {
		return nil
	}
	return c.OpenRouterModel
}

func (c *CreateWorkflowDtoModel) GetPerplexityAiModel() *PerplexityAiModel {
	if c == nil {
		return nil
	}
	return c.PerplexityAiModel
}

func (c *CreateWorkflowDtoModel) GetTogetherAiModel() *TogetherAiModel {
	if c == nil {
		return nil
	}
	return c.TogetherAiModel
}

func (c *CreateWorkflowDtoModel) GetXaiModel() *XaiModel {
	if c == nil {
		return nil
	}
	return c.XaiModel
}

func (c *CreateWorkflowDtoModel) UnmarshalJSON(data []byte) error {
	valueAnthropicModel := new(AnthropicModel)
	if err := json.Unmarshal(data, &valueAnthropicModel); err == nil {
		c.typ = "AnthropicModel"
		c.AnthropicModel = valueAnthropicModel
		return nil
	}
	valueAnyscaleModel := new(AnyscaleModel)
	if err := json.Unmarshal(data, &valueAnyscaleModel); err == nil {
		c.typ = "AnyscaleModel"
		c.AnyscaleModel = valueAnyscaleModel
		return nil
	}
	valueCerebrasModel := new(CerebrasModel)
	if err := json.Unmarshal(data, &valueCerebrasModel); err == nil {
		c.typ = "CerebrasModel"
		c.CerebrasModel = valueCerebrasModel
		return nil
	}
	valueCustomLlmModel := new(CustomLlmModel)
	if err := json.Unmarshal(data, &valueCustomLlmModel); err == nil {
		c.typ = "CustomLlmModel"
		c.CustomLlmModel = valueCustomLlmModel
		return nil
	}
	valueDeepInfraModel := new(DeepInfraModel)
	if err := json.Unmarshal(data, &valueDeepInfraModel); err == nil {
		c.typ = "DeepInfraModel"
		c.DeepInfraModel = valueDeepInfraModel
		return nil
	}
	valueDeepSeekModel := new(DeepSeekModel)
	if err := json.Unmarshal(data, &valueDeepSeekModel); err == nil {
		c.typ = "DeepSeekModel"
		c.DeepSeekModel = valueDeepSeekModel
		return nil
	}
	valueGoogleModel := new(GoogleModel)
	if err := json.Unmarshal(data, &valueGoogleModel); err == nil {
		c.typ = "GoogleModel"
		c.GoogleModel = valueGoogleModel
		return nil
	}
	valueGroqModel := new(GroqModel)
	if err := json.Unmarshal(data, &valueGroqModel); err == nil {
		c.typ = "GroqModel"
		c.GroqModel = valueGroqModel
		return nil
	}
	valueInflectionAiModel := new(InflectionAiModel)
	if err := json.Unmarshal(data, &valueInflectionAiModel); err == nil {
		c.typ = "InflectionAiModel"
		c.InflectionAiModel = valueInflectionAiModel
		return nil
	}
	valueOpenAiModel := new(OpenAiModel)
	if err := json.Unmarshal(data, &valueOpenAiModel); err == nil {
		c.typ = "OpenAiModel"
		c.OpenAiModel = valueOpenAiModel
		return nil
	}
	valueOpenRouterModel := new(OpenRouterModel)
	if err := json.Unmarshal(data, &valueOpenRouterModel); err == nil {
		c.typ = "OpenRouterModel"
		c.OpenRouterModel = valueOpenRouterModel
		return nil
	}
	valuePerplexityAiModel := new(PerplexityAiModel)
	if err := json.Unmarshal(data, &valuePerplexityAiModel); err == nil {
		c.typ = "PerplexityAiModel"
		c.PerplexityAiModel = valuePerplexityAiModel
		return nil
	}
	valueTogetherAiModel := new(TogetherAiModel)
	if err := json.Unmarshal(data, &valueTogetherAiModel); err == nil {
		c.typ = "TogetherAiModel"
		c.TogetherAiModel = valueTogetherAiModel
		return nil
	}
	valueXaiModel := new(XaiModel)
	if err := json.Unmarshal(data, &valueXaiModel); err == nil {
		c.typ = "XaiModel"
		c.XaiModel = valueXaiModel
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, c)
}

func (c CreateWorkflowDtoModel) MarshalJSON() ([]byte, error) {
	if c.typ == "AnthropicModel" || c.AnthropicModel != nil {
		return json.Marshal(c.AnthropicModel)
	}
	if c.typ == "AnyscaleModel" || c.AnyscaleModel != nil {
		return json.Marshal(c.AnyscaleModel)
	}
	if c.typ == "CerebrasModel" || c.CerebrasModel != nil {
		return json.Marshal(c.CerebrasModel)
	}
	if c.typ == "CustomLlmModel" || c.CustomLlmModel != nil {
		return json.Marshal(c.CustomLlmModel)
	}
	if c.typ == "DeepInfraModel" || c.DeepInfraModel != nil {
		return json.Marshal(c.DeepInfraModel)
	}
	if c.typ == "DeepSeekModel" || c.DeepSeekModel != nil {
		return json.Marshal(c.DeepSeekModel)
	}
	if c.typ == "GoogleModel" || c.GoogleModel != nil {
		return json.Marshal(c.GoogleModel)
	}
	if c.typ == "GroqModel" || c.GroqModel != nil {
		return json.Marshal(c.GroqModel)
	}
	if c.typ == "InflectionAiModel" || c.InflectionAiModel != nil {
		return json.Marshal(c.InflectionAiModel)
	}
	if c.typ == "OpenAiModel" || c.OpenAiModel != nil {
		return json.Marshal(c.OpenAiModel)
	}
	if c.typ == "OpenRouterModel" || c.OpenRouterModel != nil {
		return json.Marshal(c.OpenRouterModel)
	}
	if c.typ == "PerplexityAiModel" || c.PerplexityAiModel != nil {
		return json.Marshal(c.PerplexityAiModel)
	}
	if c.typ == "TogetherAiModel" || c.TogetherAiModel != nil {
		return json.Marshal(c.TogetherAiModel)
	}
	if c.typ == "XaiModel" || c.XaiModel != nil {
		return json.Marshal(c.XaiModel)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", c)
}

type CreateWorkflowDtoModelVisitor interface {
	VisitAnthropicModel(*AnthropicModel) error
	VisitAnyscaleModel(*AnyscaleModel) error
	VisitCerebrasModel(*CerebrasModel) error
	VisitCustomLlmModel(*CustomLlmModel) error
	VisitDeepInfraModel(*DeepInfraModel) error
	VisitDeepSeekModel(*DeepSeekModel) error
	VisitGoogleModel(*GoogleModel) error
	VisitGroqModel(*GroqModel) error
	VisitInflectionAiModel(*InflectionAiModel) error
	VisitOpenAiModel(*OpenAiModel) error
	VisitOpenRouterModel(*OpenRouterModel) error
	VisitPerplexityAiModel(*PerplexityAiModel) error
	VisitTogetherAiModel(*TogetherAiModel) error
	VisitXaiModel(*XaiModel) error
}

func (c *CreateWorkflowDtoModel) Accept(visitor CreateWorkflowDtoModelVisitor) error {
	if c.typ == "AnthropicModel" || c.AnthropicModel != nil {
		return visitor.VisitAnthropicModel(c.AnthropicModel)
	}
	if c.typ == "AnyscaleModel" || c.AnyscaleModel != nil {
		return visitor.VisitAnyscaleModel(c.AnyscaleModel)
	}
	if c.typ == "CerebrasModel" || c.CerebrasModel != nil {
		return visitor.VisitCerebrasModel(c.CerebrasModel)
	}
	if c.typ == "CustomLlmModel" || c.CustomLlmModel != nil {
		return visitor.VisitCustomLlmModel(c.CustomLlmModel)
	}
	if c.typ == "DeepInfraModel" || c.DeepInfraModel != nil {
		return visitor.VisitDeepInfraModel(c.DeepInfraModel)
	}
	if c.typ == "DeepSeekModel" || c.DeepSeekModel != nil {
		return visitor.VisitDeepSeekModel(c.DeepSeekModel)
	}
	if c.typ == "GoogleModel" || c.GoogleModel != nil {
		return visitor.VisitGoogleModel(c.GoogleModel)
	}
	if c.typ == "GroqModel" || c.GroqModel != nil {
		return visitor.VisitGroqModel(c.GroqModel)
	}
	if c.typ == "InflectionAiModel" || c.InflectionAiModel != nil {
		return visitor.VisitInflectionAiModel(c.InflectionAiModel)
	}
	if c.typ == "OpenAiModel" || c.OpenAiModel != nil {
		return visitor.VisitOpenAiModel(c.OpenAiModel)
	}
	if c.typ == "OpenRouterModel" || c.OpenRouterModel != nil {
		return visitor.VisitOpenRouterModel(c.OpenRouterModel)
	}
	if c.typ == "PerplexityAiModel" || c.PerplexityAiModel != nil {
		return visitor.VisitPerplexityAiModel(c.PerplexityAiModel)
	}
	if c.typ == "TogetherAiModel" || c.TogetherAiModel != nil {
		return visitor.VisitTogetherAiModel(c.TogetherAiModel)
	}
	if c.typ == "XaiModel" || c.XaiModel != nil {
		return visitor.VisitXaiModel(c.XaiModel)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", c)
}

type CreateWorkflowDtoNodesItem struct {
	Start      *Start
	Assistant  *Assistant
	Say        *Say
	Gather     *Gather
	ApiRequest *ApiRequest
	Hangup     *Hangup
	Transfer   *Transfer

	typ string
}

func (c *CreateWorkflowDtoNodesItem) GetStart() *Start {
	if c == nil {
		return nil
	}
	return c.Start
}

func (c *CreateWorkflowDtoNodesItem) GetAssistant() *Assistant {
	if c == nil {
		return nil
	}
	return c.Assistant
}

func (c *CreateWorkflowDtoNodesItem) GetSay() *Say {
	if c == nil {
		return nil
	}
	return c.Say
}

func (c *CreateWorkflowDtoNodesItem) GetGather() *Gather {
	if c == nil {
		return nil
	}
	return c.Gather
}

func (c *CreateWorkflowDtoNodesItem) GetApiRequest() *ApiRequest {
	if c == nil {
		return nil
	}
	return c.ApiRequest
}

func (c *CreateWorkflowDtoNodesItem) GetHangup() *Hangup {
	if c == nil {
		return nil
	}
	return c.Hangup
}

func (c *CreateWorkflowDtoNodesItem) GetTransfer() *Transfer {
	if c == nil {
		return nil
	}
	return c.Transfer
}

func (c *CreateWorkflowDtoNodesItem) UnmarshalJSON(data []byte) error {
	valueStart := new(Start)
	if err := json.Unmarshal(data, &valueStart); err == nil {
		c.typ = "Start"
		c.Start = valueStart
		return nil
	}
	valueAssistant := new(Assistant)
	if err := json.Unmarshal(data, &valueAssistant); err == nil {
		c.typ = "Assistant"
		c.Assistant = valueAssistant
		return nil
	}
	valueSay := new(Say)
	if err := json.Unmarshal(data, &valueSay); err == nil {
		c.typ = "Say"
		c.Say = valueSay
		return nil
	}
	valueGather := new(Gather)
	if err := json.Unmarshal(data, &valueGather); err == nil {
		c.typ = "Gather"
		c.Gather = valueGather
		return nil
	}
	valueApiRequest := new(ApiRequest)
	if err := json.Unmarshal(data, &valueApiRequest); err == nil {
		c.typ = "ApiRequest"
		c.ApiRequest = valueApiRequest
		return nil
	}
	valueHangup := new(Hangup)
	if err := json.Unmarshal(data, &valueHangup); err == nil {
		c.typ = "Hangup"
		c.Hangup = valueHangup
		return nil
	}
	valueTransfer := new(Transfer)
	if err := json.Unmarshal(data, &valueTransfer); err == nil {
		c.typ = "Transfer"
		c.Transfer = valueTransfer
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, c)
}

func (c CreateWorkflowDtoNodesItem) MarshalJSON() ([]byte, error) {
	if c.typ == "Start" || c.Start != nil {
		return json.Marshal(c.Start)
	}
	if c.typ == "Assistant" || c.Assistant != nil {
		return json.Marshal(c.Assistant)
	}
	if c.typ == "Say" || c.Say != nil {
		return json.Marshal(c.Say)
	}
	if c.typ == "Gather" || c.Gather != nil {
		return json.Marshal(c.Gather)
	}
	if c.typ == "ApiRequest" || c.ApiRequest != nil {
		return json.Marshal(c.ApiRequest)
	}
	if c.typ == "Hangup" || c.Hangup != nil {
		return json.Marshal(c.Hangup)
	}
	if c.typ == "Transfer" || c.Transfer != nil {
		return json.Marshal(c.Transfer)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", c)
}

type CreateWorkflowDtoNodesItemVisitor interface {
	VisitStart(*Start) error
	VisitAssistant(*Assistant) error
	VisitSay(*Say) error
	VisitGather(*Gather) error
	VisitApiRequest(*ApiRequest) error
	VisitHangup(*Hangup) error
	VisitTransfer(*Transfer) error
}

func (c *CreateWorkflowDtoNodesItem) Accept(visitor CreateWorkflowDtoNodesItemVisitor) error {
	if c.typ == "Start" || c.Start != nil {
		return visitor.VisitStart(c.Start)
	}
	if c.typ == "Assistant" || c.Assistant != nil {
		return visitor.VisitAssistant(c.Assistant)
	}
	if c.typ == "Say" || c.Say != nil {
		return visitor.VisitSay(c.Say)
	}
	if c.typ == "Gather" || c.Gather != nil {
		return visitor.VisitGather(c.Gather)
	}
	if c.typ == "ApiRequest" || c.ApiRequest != nil {
		return visitor.VisitApiRequest(c.ApiRequest)
	}
	if c.typ == "Hangup" || c.Hangup != nil {
		return visitor.VisitHangup(c.Hangup)
	}
	if c.typ == "Transfer" || c.Transfer != nil {
		return visitor.VisitTransfer(c.Transfer)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", c)
}

// These are the options for the workflow's LLM.
type UpdateWorkflowDtoModel struct {
	AnthropicModel    *AnthropicModel
	AnyscaleModel     *AnyscaleModel
	CerebrasModel     *CerebrasModel
	CustomLlmModel    *CustomLlmModel
	DeepInfraModel    *DeepInfraModel
	DeepSeekModel     *DeepSeekModel
	GoogleModel       *GoogleModel
	GroqModel         *GroqModel
	InflectionAiModel *InflectionAiModel
	OpenAiModel       *OpenAiModel
	OpenRouterModel   *OpenRouterModel
	PerplexityAiModel *PerplexityAiModel
	TogetherAiModel   *TogetherAiModel
	XaiModel          *XaiModel

	typ string
}

func (u *UpdateWorkflowDtoModel) GetAnthropicModel() *AnthropicModel {
	if u == nil {
		return nil
	}
	return u.AnthropicModel
}

func (u *UpdateWorkflowDtoModel) GetAnyscaleModel() *AnyscaleModel {
	if u == nil {
		return nil
	}
	return u.AnyscaleModel
}

func (u *UpdateWorkflowDtoModel) GetCerebrasModel() *CerebrasModel {
	if u == nil {
		return nil
	}
	return u.CerebrasModel
}

func (u *UpdateWorkflowDtoModel) GetCustomLlmModel() *CustomLlmModel {
	if u == nil {
		return nil
	}
	return u.CustomLlmModel
}

func (u *UpdateWorkflowDtoModel) GetDeepInfraModel() *DeepInfraModel {
	if u == nil {
		return nil
	}
	return u.DeepInfraModel
}

func (u *UpdateWorkflowDtoModel) GetDeepSeekModel() *DeepSeekModel {
	if u == nil {
		return nil
	}
	return u.DeepSeekModel
}

func (u *UpdateWorkflowDtoModel) GetGoogleModel() *GoogleModel {
	if u == nil {
		return nil
	}
	return u.GoogleModel
}

func (u *UpdateWorkflowDtoModel) GetGroqModel() *GroqModel {
	if u == nil {
		return nil
	}
	return u.GroqModel
}

func (u *UpdateWorkflowDtoModel) GetInflectionAiModel() *InflectionAiModel {
	if u == nil {
		return nil
	}
	return u.InflectionAiModel
}

func (u *UpdateWorkflowDtoModel) GetOpenAiModel() *OpenAiModel {
	if u == nil {
		return nil
	}
	return u.OpenAiModel
}

func (u *UpdateWorkflowDtoModel) GetOpenRouterModel() *OpenRouterModel {
	if u == nil {
		return nil
	}
	return u.OpenRouterModel
}

func (u *UpdateWorkflowDtoModel) GetPerplexityAiModel() *PerplexityAiModel {
	if u == nil {
		return nil
	}
	return u.PerplexityAiModel
}

func (u *UpdateWorkflowDtoModel) GetTogetherAiModel() *TogetherAiModel {
	if u == nil {
		return nil
	}
	return u.TogetherAiModel
}

func (u *UpdateWorkflowDtoModel) GetXaiModel() *XaiModel {
	if u == nil {
		return nil
	}
	return u.XaiModel
}

func (u *UpdateWorkflowDtoModel) UnmarshalJSON(data []byte) error {
	valueAnthropicModel := new(AnthropicModel)
	if err := json.Unmarshal(data, &valueAnthropicModel); err == nil {
		u.typ = "AnthropicModel"
		u.AnthropicModel = valueAnthropicModel
		return nil
	}
	valueAnyscaleModel := new(AnyscaleModel)
	if err := json.Unmarshal(data, &valueAnyscaleModel); err == nil {
		u.typ = "AnyscaleModel"
		u.AnyscaleModel = valueAnyscaleModel
		return nil
	}
	valueCerebrasModel := new(CerebrasModel)
	if err := json.Unmarshal(data, &valueCerebrasModel); err == nil {
		u.typ = "CerebrasModel"
		u.CerebrasModel = valueCerebrasModel
		return nil
	}
	valueCustomLlmModel := new(CustomLlmModel)
	if err := json.Unmarshal(data, &valueCustomLlmModel); err == nil {
		u.typ = "CustomLlmModel"
		u.CustomLlmModel = valueCustomLlmModel
		return nil
	}
	valueDeepInfraModel := new(DeepInfraModel)
	if err := json.Unmarshal(data, &valueDeepInfraModel); err == nil {
		u.typ = "DeepInfraModel"
		u.DeepInfraModel = valueDeepInfraModel
		return nil
	}
	valueDeepSeekModel := new(DeepSeekModel)
	if err := json.Unmarshal(data, &valueDeepSeekModel); err == nil {
		u.typ = "DeepSeekModel"
		u.DeepSeekModel = valueDeepSeekModel
		return nil
	}
	valueGoogleModel := new(GoogleModel)
	if err := json.Unmarshal(data, &valueGoogleModel); err == nil {
		u.typ = "GoogleModel"
		u.GoogleModel = valueGoogleModel
		return nil
	}
	valueGroqModel := new(GroqModel)
	if err := json.Unmarshal(data, &valueGroqModel); err == nil {
		u.typ = "GroqModel"
		u.GroqModel = valueGroqModel
		return nil
	}
	valueInflectionAiModel := new(InflectionAiModel)
	if err := json.Unmarshal(data, &valueInflectionAiModel); err == nil {
		u.typ = "InflectionAiModel"
		u.InflectionAiModel = valueInflectionAiModel
		return nil
	}
	valueOpenAiModel := new(OpenAiModel)
	if err := json.Unmarshal(data, &valueOpenAiModel); err == nil {
		u.typ = "OpenAiModel"
		u.OpenAiModel = valueOpenAiModel
		return nil
	}
	valueOpenRouterModel := new(OpenRouterModel)
	if err := json.Unmarshal(data, &valueOpenRouterModel); err == nil {
		u.typ = "OpenRouterModel"
		u.OpenRouterModel = valueOpenRouterModel
		return nil
	}
	valuePerplexityAiModel := new(PerplexityAiModel)
	if err := json.Unmarshal(data, &valuePerplexityAiModel); err == nil {
		u.typ = "PerplexityAiModel"
		u.PerplexityAiModel = valuePerplexityAiModel
		return nil
	}
	valueTogetherAiModel := new(TogetherAiModel)
	if err := json.Unmarshal(data, &valueTogetherAiModel); err == nil {
		u.typ = "TogetherAiModel"
		u.TogetherAiModel = valueTogetherAiModel
		return nil
	}
	valueXaiModel := new(XaiModel)
	if err := json.Unmarshal(data, &valueXaiModel); err == nil {
		u.typ = "XaiModel"
		u.XaiModel = valueXaiModel
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, u)
}

func (u UpdateWorkflowDtoModel) MarshalJSON() ([]byte, error) {
	if u.typ == "AnthropicModel" || u.AnthropicModel != nil {
		return json.Marshal(u.AnthropicModel)
	}
	if u.typ == "AnyscaleModel" || u.AnyscaleModel != nil {
		return json.Marshal(u.AnyscaleModel)
	}
	if u.typ == "CerebrasModel" || u.CerebrasModel != nil {
		return json.Marshal(u.CerebrasModel)
	}
	if u.typ == "CustomLlmModel" || u.CustomLlmModel != nil {
		return json.Marshal(u.CustomLlmModel)
	}
	if u.typ == "DeepInfraModel" || u.DeepInfraModel != nil {
		return json.Marshal(u.DeepInfraModel)
	}
	if u.typ == "DeepSeekModel" || u.DeepSeekModel != nil {
		return json.Marshal(u.DeepSeekModel)
	}
	if u.typ == "GoogleModel" || u.GoogleModel != nil {
		return json.Marshal(u.GoogleModel)
	}
	if u.typ == "GroqModel" || u.GroqModel != nil {
		return json.Marshal(u.GroqModel)
	}
	if u.typ == "InflectionAiModel" || u.InflectionAiModel != nil {
		return json.Marshal(u.InflectionAiModel)
	}
	if u.typ == "OpenAiModel" || u.OpenAiModel != nil {
		return json.Marshal(u.OpenAiModel)
	}
	if u.typ == "OpenRouterModel" || u.OpenRouterModel != nil {
		return json.Marshal(u.OpenRouterModel)
	}
	if u.typ == "PerplexityAiModel" || u.PerplexityAiModel != nil {
		return json.Marshal(u.PerplexityAiModel)
	}
	if u.typ == "TogetherAiModel" || u.TogetherAiModel != nil {
		return json.Marshal(u.TogetherAiModel)
	}
	if u.typ == "XaiModel" || u.XaiModel != nil {
		return json.Marshal(u.XaiModel)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", u)
}

type UpdateWorkflowDtoModelVisitor interface {
	VisitAnthropicModel(*AnthropicModel) error
	VisitAnyscaleModel(*AnyscaleModel) error
	VisitCerebrasModel(*CerebrasModel) error
	VisitCustomLlmModel(*CustomLlmModel) error
	VisitDeepInfraModel(*DeepInfraModel) error
	VisitDeepSeekModel(*DeepSeekModel) error
	VisitGoogleModel(*GoogleModel) error
	VisitGroqModel(*GroqModel) error
	VisitInflectionAiModel(*InflectionAiModel) error
	VisitOpenAiModel(*OpenAiModel) error
	VisitOpenRouterModel(*OpenRouterModel) error
	VisitPerplexityAiModel(*PerplexityAiModel) error
	VisitTogetherAiModel(*TogetherAiModel) error
	VisitXaiModel(*XaiModel) error
}

func (u *UpdateWorkflowDtoModel) Accept(visitor UpdateWorkflowDtoModelVisitor) error {
	if u.typ == "AnthropicModel" || u.AnthropicModel != nil {
		return visitor.VisitAnthropicModel(u.AnthropicModel)
	}
	if u.typ == "AnyscaleModel" || u.AnyscaleModel != nil {
		return visitor.VisitAnyscaleModel(u.AnyscaleModel)
	}
	if u.typ == "CerebrasModel" || u.CerebrasModel != nil {
		return visitor.VisitCerebrasModel(u.CerebrasModel)
	}
	if u.typ == "CustomLlmModel" || u.CustomLlmModel != nil {
		return visitor.VisitCustomLlmModel(u.CustomLlmModel)
	}
	if u.typ == "DeepInfraModel" || u.DeepInfraModel != nil {
		return visitor.VisitDeepInfraModel(u.DeepInfraModel)
	}
	if u.typ == "DeepSeekModel" || u.DeepSeekModel != nil {
		return visitor.VisitDeepSeekModel(u.DeepSeekModel)
	}
	if u.typ == "GoogleModel" || u.GoogleModel != nil {
		return visitor.VisitGoogleModel(u.GoogleModel)
	}
	if u.typ == "GroqModel" || u.GroqModel != nil {
		return visitor.VisitGroqModel(u.GroqModel)
	}
	if u.typ == "InflectionAiModel" || u.InflectionAiModel != nil {
		return visitor.VisitInflectionAiModel(u.InflectionAiModel)
	}
	if u.typ == "OpenAiModel" || u.OpenAiModel != nil {
		return visitor.VisitOpenAiModel(u.OpenAiModel)
	}
	if u.typ == "OpenRouterModel" || u.OpenRouterModel != nil {
		return visitor.VisitOpenRouterModel(u.OpenRouterModel)
	}
	if u.typ == "PerplexityAiModel" || u.PerplexityAiModel != nil {
		return visitor.VisitPerplexityAiModel(u.PerplexityAiModel)
	}
	if u.typ == "TogetherAiModel" || u.TogetherAiModel != nil {
		return visitor.VisitTogetherAiModel(u.TogetherAiModel)
	}
	if u.typ == "XaiModel" || u.XaiModel != nil {
		return visitor.VisitXaiModel(u.XaiModel)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", u)
}

type UpdateWorkflowDtoNodesItem struct {
	Start      *Start
	Assistant  *Assistant
	Say        *Say
	Gather     *Gather
	ApiRequest *ApiRequest
	Hangup     *Hangup
	Transfer   *Transfer

	typ string
}

func (u *UpdateWorkflowDtoNodesItem) GetStart() *Start {
	if u == nil {
		return nil
	}
	return u.Start
}

func (u *UpdateWorkflowDtoNodesItem) GetAssistant() *Assistant {
	if u == nil {
		return nil
	}
	return u.Assistant
}

func (u *UpdateWorkflowDtoNodesItem) GetSay() *Say {
	if u == nil {
		return nil
	}
	return u.Say
}

func (u *UpdateWorkflowDtoNodesItem) GetGather() *Gather {
	if u == nil {
		return nil
	}
	return u.Gather
}

func (u *UpdateWorkflowDtoNodesItem) GetApiRequest() *ApiRequest {
	if u == nil {
		return nil
	}
	return u.ApiRequest
}

func (u *UpdateWorkflowDtoNodesItem) GetHangup() *Hangup {
	if u == nil {
		return nil
	}
	return u.Hangup
}

func (u *UpdateWorkflowDtoNodesItem) GetTransfer() *Transfer {
	if u == nil {
		return nil
	}
	return u.Transfer
}

func (u *UpdateWorkflowDtoNodesItem) UnmarshalJSON(data []byte) error {
	valueStart := new(Start)
	if err := json.Unmarshal(data, &valueStart); err == nil {
		u.typ = "Start"
		u.Start = valueStart
		return nil
	}
	valueAssistant := new(Assistant)
	if err := json.Unmarshal(data, &valueAssistant); err == nil {
		u.typ = "Assistant"
		u.Assistant = valueAssistant
		return nil
	}
	valueSay := new(Say)
	if err := json.Unmarshal(data, &valueSay); err == nil {
		u.typ = "Say"
		u.Say = valueSay
		return nil
	}
	valueGather := new(Gather)
	if err := json.Unmarshal(data, &valueGather); err == nil {
		u.typ = "Gather"
		u.Gather = valueGather
		return nil
	}
	valueApiRequest := new(ApiRequest)
	if err := json.Unmarshal(data, &valueApiRequest); err == nil {
		u.typ = "ApiRequest"
		u.ApiRequest = valueApiRequest
		return nil
	}
	valueHangup := new(Hangup)
	if err := json.Unmarshal(data, &valueHangup); err == nil {
		u.typ = "Hangup"
		u.Hangup = valueHangup
		return nil
	}
	valueTransfer := new(Transfer)
	if err := json.Unmarshal(data, &valueTransfer); err == nil {
		u.typ = "Transfer"
		u.Transfer = valueTransfer
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, u)
}

func (u UpdateWorkflowDtoNodesItem) MarshalJSON() ([]byte, error) {
	if u.typ == "Start" || u.Start != nil {
		return json.Marshal(u.Start)
	}
	if u.typ == "Assistant" || u.Assistant != nil {
		return json.Marshal(u.Assistant)
	}
	if u.typ == "Say" || u.Say != nil {
		return json.Marshal(u.Say)
	}
	if u.typ == "Gather" || u.Gather != nil {
		return json.Marshal(u.Gather)
	}
	if u.typ == "ApiRequest" || u.ApiRequest != nil {
		return json.Marshal(u.ApiRequest)
	}
	if u.typ == "Hangup" || u.Hangup != nil {
		return json.Marshal(u.Hangup)
	}
	if u.typ == "Transfer" || u.Transfer != nil {
		return json.Marshal(u.Transfer)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", u)
}

type UpdateWorkflowDtoNodesItemVisitor interface {
	VisitStart(*Start) error
	VisitAssistant(*Assistant) error
	VisitSay(*Say) error
	VisitGather(*Gather) error
	VisitApiRequest(*ApiRequest) error
	VisitHangup(*Hangup) error
	VisitTransfer(*Transfer) error
}

func (u *UpdateWorkflowDtoNodesItem) Accept(visitor UpdateWorkflowDtoNodesItemVisitor) error {
	if u.typ == "Start" || u.Start != nil {
		return visitor.VisitStart(u.Start)
	}
	if u.typ == "Assistant" || u.Assistant != nil {
		return visitor.VisitAssistant(u.Assistant)
	}
	if u.typ == "Say" || u.Say != nil {
		return visitor.VisitSay(u.Say)
	}
	if u.typ == "Gather" || u.Gather != nil {
		return visitor.VisitGather(u.Gather)
	}
	if u.typ == "ApiRequest" || u.ApiRequest != nil {
		return visitor.VisitApiRequest(u.ApiRequest)
	}
	if u.typ == "Hangup" || u.Hangup != nil {
		return visitor.VisitHangup(u.Hangup)
	}
	if u.typ == "Transfer" || u.Transfer != nil {
		return visitor.VisitTransfer(u.Transfer)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", u)
}
