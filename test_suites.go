// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/bionis-labs/vapi-server-sdk-go/internal"
	time "time"
)

type CreateTestSuiteDto struct {
	// This is the name of the test suite.
	Name *string `json:"name,omitempty" url:"-"`
	// This is the phone number ID associated with this test suite.
	PhoneNumberId *string `json:"phoneNumberId,omitempty" url:"-"`
}

type TestSuiteControllerFindAllPaginatedRequest struct {
	// This is the page number to return. Defaults to 1.
	Page *float64 `json:"-" url:"page,omitempty"`
	// This is the sort order for pagination. Defaults to 'DESC'.
	SortOrder *TestSuiteControllerFindAllPaginatedRequestSortOrder `json:"-" url:"sortOrder,omitempty"`
	// This is the maximum number of items to return. Defaults to 100.
	Limit *float64 `json:"-" url:"limit,omitempty"`
	// This will return items where the createdAt is greater than the specified value.
	CreatedAtGt *time.Time `json:"-" url:"createdAtGt,omitempty"`
	// This will return items where the createdAt is less than the specified value.
	CreatedAtLt *time.Time `json:"-" url:"createdAtLt,omitempty"`
	// This will return items where the createdAt is greater than or equal to the specified value.
	CreatedAtGe *time.Time `json:"-" url:"createdAtGe,omitempty"`
	// This will return items where the createdAt is less than or equal to the specified value.
	CreatedAtLe *time.Time `json:"-" url:"createdAtLe,omitempty"`
	// This will return items where the updatedAt is greater than the specified value.
	UpdatedAtGt *time.Time `json:"-" url:"updatedAtGt,omitempty"`
	// This will return items where the updatedAt is less than the specified value.
	UpdatedAtLt *time.Time `json:"-" url:"updatedAtLt,omitempty"`
	// This will return items where the updatedAt is greater than or equal to the specified value.
	UpdatedAtGe *time.Time `json:"-" url:"updatedAtGe,omitempty"`
	// This will return items where the updatedAt is less than or equal to the specified value.
	UpdatedAtLe *time.Time `json:"-" url:"updatedAtLe,omitempty"`
}

type UpdateTestSuiteDto struct {
	// This is the name of the test suite.
	Name *string `json:"name,omitempty" url:"-"`
	// This is the phone number ID associated with this test suite.
	PhoneNumberId *string `json:"phoneNumberId,omitempty" url:"-"`
}

type TestSuite struct {
	// This is the unique identifier for the test suite.
	Id string `json:"id" url:"id"`
	// This is the unique identifier for the org that this test suite belongs to.
	OrgId string `json:"orgId" url:"orgId"`
	// This is the ISO 8601 date-time string of when the test suite was created.
	CreatedAt time.Time `json:"createdAt" url:"createdAt"`
	// This is the ISO 8601 date-time string of when the test suite was last updated.
	UpdatedAt time.Time `json:"updatedAt" url:"updatedAt"`
	// This is the name of the test suite.
	Name *string `json:"name,omitempty" url:"name,omitempty"`
	// This is the phone number ID associated with this test suite.
	PhoneNumberId *string `json:"phoneNumberId,omitempty" url:"phoneNumberId,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TestSuite) GetId() string {
	if t == nil {
		return ""
	}
	return t.Id
}

func (t *TestSuite) GetOrgId() string {
	if t == nil {
		return ""
	}
	return t.OrgId
}

func (t *TestSuite) GetCreatedAt() time.Time {
	if t == nil {
		return time.Time{}
	}
	return t.CreatedAt
}

func (t *TestSuite) GetUpdatedAt() time.Time {
	if t == nil {
		return time.Time{}
	}
	return t.UpdatedAt
}

func (t *TestSuite) GetName() *string {
	if t == nil {
		return nil
	}
	return t.Name
}

func (t *TestSuite) GetPhoneNumberId() *string {
	if t == nil {
		return nil
	}
	return t.PhoneNumberId
}

func (t *TestSuite) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TestSuite) UnmarshalJSON(data []byte) error {
	type embed TestSuite
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"createdAt"`
		UpdatedAt *internal.DateTime `json:"updatedAt"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = TestSuite(unmarshaler.embed)
	t.CreatedAt = unmarshaler.CreatedAt.Time()
	t.UpdatedAt = unmarshaler.UpdatedAt.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestSuite) MarshalJSON() ([]byte, error) {
	type embed TestSuite
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"createdAt"`
		UpdatedAt *internal.DateTime `json:"updatedAt"`
	}{
		embed:     embed(*t),
		CreatedAt: internal.NewDateTime(t.CreatedAt),
		UpdatedAt: internal.NewDateTime(t.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (t *TestSuite) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TestSuitesPaginatedResponse struct {
	Results  []*TestSuite    `json:"results,omitempty" url:"results,omitempty"`
	Metadata *PaginationMeta `json:"metadata,omitempty" url:"metadata,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TestSuitesPaginatedResponse) GetResults() []*TestSuite {
	if t == nil {
		return nil
	}
	return t.Results
}

func (t *TestSuitesPaginatedResponse) GetMetadata() *PaginationMeta {
	if t == nil {
		return nil
	}
	return t.Metadata
}

func (t *TestSuitesPaginatedResponse) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TestSuitesPaginatedResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler TestSuitesPaginatedResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TestSuitesPaginatedResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestSuitesPaginatedResponse) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TestSuiteControllerFindAllPaginatedRequestSortOrder string

const (
	TestSuiteControllerFindAllPaginatedRequestSortOrderAsc  TestSuiteControllerFindAllPaginatedRequestSortOrder = "ASC"
	TestSuiteControllerFindAllPaginatedRequestSortOrderDesc TestSuiteControllerFindAllPaginatedRequestSortOrder = "DESC"
)

func NewTestSuiteControllerFindAllPaginatedRequestSortOrderFromString(s string) (TestSuiteControllerFindAllPaginatedRequestSortOrder, error) {
	switch s {
	case "ASC":
		return TestSuiteControllerFindAllPaginatedRequestSortOrderAsc, nil
	case "DESC":
		return TestSuiteControllerFindAllPaginatedRequestSortOrderDesc, nil
	}
	var t TestSuiteControllerFindAllPaginatedRequestSortOrder
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (t TestSuiteControllerFindAllPaginatedRequestSortOrder) Ptr() *TestSuiteControllerFindAllPaginatedRequestSortOrder {
	return &t
}
